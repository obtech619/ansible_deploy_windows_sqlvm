---

- name: Create a VM
  vmware_guest:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_passwd }}"
    validate_certs: no 
    cluster: "{{ esxcluster }}"
    datacenter: "{{ vcenter_dc }}"
    template_src: "{{ vmtemplate }}"
    name: "{{ vm_name }}" 
    folder: "{{ vm_folder }}"

    disk: "{{ disk_list }}"

    hardware:
      hotadd_cpu: false
      hotadd_memory: true
      memory_mb: "{{ vm_mem }}"
      num_cpus: "{{ vm_cpus }}"

    customization:
      autologon: yes
      autologoncount: 1
      password: "{{ admin_pwd }}"
      dns_servers: "{{ dns_servers }}"
      domain: "{{ vm_domain }}"
      timezone: "{{ win_time }}"

    networks:
      - name: "{{ vm_dvswitch }}"
        ip: "{{ vm_ip }}"
        netmask: "{{ vm_netmask }}"
        gateway: "{{ vm_gateway }}"
        type: "{{ vm_nictype }}"
        domain: "{{ vm_domain }}"
        start_connected: true
    customvalues:
      - key: "isolation.tools.copy.disable"
        value: "True"
      - key: "isolation.tools.paste.disable"
        value: "True"
      - key: "isolation.tools.setGUIOptions.enable"
        value: "False"
      - key: "isolation.tools.diskShrink.disable"
        value: "True"
      - key: "isolation.tools.diskWiper.disable"
        value: "True"
      - key: "isolation.device.connectable.disable"
        value: "True"
      - key: "isolation.device.edit.disable"
        value: "True"
      - key: "mks.enable3d"
        value: "False"
      - key: "tools.setInfo.sizeLimit"
        value: "1048576"
      - key: "RemoteDisplay.vnc.enabled"
        value: "False"
      - key: "tools.guestlib.enableHostInfo"
        value: "False"

    wait_for_customization: yes
    wait_for_ip_address: yes

  async: 1800
  poll: 30

- name: Configure SQL Virtual Disk
  vmware_guest_disk:
    validate_certs: False
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_passwd }}"    
    datacenter: "{{ vcenter_dc }}"
    name: "{{ vm_name }}"
    disk:
      - size_gb: "{{ mount }}"
        type: thick
        state: present
        datastore: "{{ vcenter_ds }}"
        scsi_controller: 1
        scsi_type: 'paravirtual'
        unit_number: 0
      - size_gb: "{{ db }}"
        type: thick
        state: present
        datastore: "{{ vcenter_ds }}"
        scsi_controller: 1
        scsi_type: 'paravirtual'
        unit_number: 1
      - size_gb: "{{ logs }}"
        type: thick
        state: present
        datastore: "{{ vcenter_ds }}"
        scsi_controller: 1
        scsi_type: 'paravirtual'
        unit_number: 2
      - size_gb: "{{ tempdb }}"
        type: thick
        state: present
        datastore: "{{ vcenter_ds }}"
        scsi_controller: 1
        scsi_type: 'paravirtual'
        unit_number: 3
      - size_gb: "{{ system }}"
        type: thick
        state: present
        datastore: "{{ vcenter_ds }}"
        scsi_controller: 1
        scsi_type: 'paravirtual'
        unit_number: 4
      - size_gb: "{{ backups }}"
        type: thick
        state: present
        datastore: "{{ vcenter_ds }}"
        scsi_controller: 1
        scsi_type: 'paravirtual'
        unit_number: 5

- name: Get VM UUID
  vmware_guest_facts:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_passwd }}"
    validate_certs: no
    datacenter: "{{ vcenter_dc }}"
    folder: "/{{vcenter_dc}}/vm"
    name: "{{ vm_name }}"
  register: vm_facts

- name: Rename the VM in vCenter to all lowercase
  vmware_guest:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_passwd }}"
    validate_certs: no
    cluster: "{{ esxcluster }}"
    uuid: "{{ vm_facts.instance.hw_product_uuid }}"
    name: "{{ vm_name | lower }}"

- name: add host to group 'new_hosts'
  add_host:
    name: "{{ vm_ip }}"
    groups: new_hosts
    ansible_connection: winrm
    ansible_winrm_server_cert_validation: ignore
    ansible_become: false
    ansible_user: "{{ admin_user }}"
    ansible_password: "{{ admin_pwd }}"

- name: wait for winrm
  wait_for:
    port: 5986
    host: "{{ vm_ip }}"

- name: Wait for system to become reachable over WinRM
  wait_for_connection:
    delay: 30
    timeout: 300
  delegate_to: "{{ vm_ip }}"
  vars:
    ansible_connection: winrm
    ansible_user: "{{ admin_user }}"
    ansible_password: "{{ admin_pwd }}"
    ansible_winrm_transport: ntlm
    ansible_winrm_server_cert_validation: ignore
    ansible_become_method: runas

- name: Confirming WINRM execution post sysprep
  win_wait_for:
    host: "{{ vm_ip }}"
    path: c:\windows\setup\scripts\winrm_status.log
    regex: running
  delegate_to: "{{ vm_ip }}"
  vars:
    ansible_connection: winrm
    ansible_winrm_server_cert_validation: ignore
    ansible_become: false
    ansible_user: "{{ admin_user }}"
    ansible_password: "{{ admin_pwd }}"

- name: Initialize new raw disk and format for NTFS
  win_shell: |
    ##Initialize and format M:\ Drive
    Set-Disk -Number 1 -IsReadOnly $false
    Initialize-Disk -Number 1 -PartitionStyle GPT
    New-Partition -DiskNumber 1 -UseMaximumSize
    Add-PartitionAccessPath -DiskNumber 1 -PartitionNumber 2 -AccessPath "m:\"
    Get-Partition -DiskNumber 1 -PartitionNumber 2 |Format-volume -FileSystem NTFS -NewFileSystemLabel M -AllocationUnitSize 65536 -Confirm:$false
    ##Create DB Mount Point Directory
    new-item -Path "m:\" -Name "db" -ItemType "directory"
    ##Initialize and format DB Drive
    Set-Disk -Number 2 -IsReadOnly $false
    Initialize-Disk -Number 2 -PartitionStyle GPT
    New-Partition -DiskNumber 2 -UseMaximumSize
    Add-PartitionAccessPath -DiskNumber 2 -PartitionNumber 2 -AccessPath "m:\db"
    Get-Partition -DiskNumber 2 -PartitionNumber 2 |Format-volume -FileSystem NTFS -NewFileSystemLabel DB -AllocationUnitSize 65536 -Confirm:$false
    ##Create logs Mount Point Directory
    new-item -Path "m:\" -Name "logs" -ItemType "directory"
    ##Initialize and format logs  Drive
    Set-Disk -Number 3 -IsReadOnly $false
    Initialize-Disk -Number 3 -PartitionStyle GPT
    New-Partition -DiskNumber 3 -UseMaximumSize
    Add-PartitionAccessPath -DiskNumber 3 -PartitionNumber 2 -AccessPath "m:\logs"
    Get-Partition -DiskNumber 3 -PartitionNumber 2 |Format-volume -FileSystem NTFS -NewFileSystemLabel Logs -AllocationUnitSize 65536 -Confirm:$false
    ##Create TempDB Mount Point Directory
    new-item -Path "m:\" -Name "tempdb" -ItemType "directory"
    ##Initialize and format tempdb Drive
    Set-Disk -Number 4 -IsReadOnly $false
    Initialize-Disk -Number 4 -PartitionStyle GPT
    New-Partition -DiskNumber 4 -UseMaximumSize
    Add-PartitionAccessPath -DiskNumber 4 -PartitionNumber 2 -AccessPath "m:\tempdb"
    Get-Partition -DiskNumber 4 -PartitionNumber 2 |Format-volume -FileSystem NTFS -NewFileSystemLabel TempDB -AllocationUnitSize 65536 -Confirm:$false
    ##Create System Mount Point Directory
    new-item -Path "m:\" -Name "system" -ItemType "directory"
    ##Initialize and format System Drive
    Set-Disk -Number 5 -IsReadOnly $false
    Initialize-Disk -Number 5 -PartitionStyle GPT
    New-Partition -DiskNumber 5 -UseMaximumSize
    Add-PartitionAccessPath -DiskNumber 5 -PartitionNumber 2 -AccessPath "m:\system"
    Get-Partition -DiskNumber 5 -PartitionNumber 2 |Format-volume -FileSystem NTFS -NewFileSystemLabel System -AllocationUnitSize 65536 -Confirm:$false
    ##Create Backups Mount Point Directory
    new-item -Path "m:\" -Name "backups" -ItemType "directory"
    ##Initialize and format System Drive
    Set-Disk -Number 6 -IsReadOnly $false
    Initialize-Disk -Number 6 -PartitionStyle GPT
    New-Partition -DiskNumber 6 -UseMaximumSize
    Add-PartitionAccessPath -DiskNumber 6 -PartitionNumber 2 -AccessPath "m:\backups"
    Get-Partition -DiskNumber 6 -PartitionNumber 2 |Format-volume -FileSystem NTFS -NewFileSystemLabel Backups -AllocationUnitSize 65536 -Confirm:$false
  delegate_to: "{{ vm_ip }}"
  vars:
    ansible_connection: winrm
    ansible_winrm_server_cert_validation: ignore
    ansible_become: false
    ansible_user: "{{ admin_user }}"
    ansible_password: "{{ admin_pwd }}"
